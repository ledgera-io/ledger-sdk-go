/*
ledgera

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the LedgerTransactionParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LedgerTransactionParams{}

// LedgerTransactionParams struct for LedgerTransactionParams
type LedgerTransactionParams struct {
	Amount string `json:"amount"`
	Currency string `json:"currency"`
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	ParamAccount1 *string `json:"paramAccount1,omitempty"`
	ParamAccount2 *string `json:"paramAccount2,omitempty"`
	TransactionId string `json:"transactionId"`
	TransactionProcess string `json:"transactionProcess"`
	TransactionType string `json:"transactionType"`
}

// NewLedgerTransactionParams instantiates a new LedgerTransactionParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLedgerTransactionParams(amount string, currency string, transactionId string, transactionProcess string, transactionType string) *LedgerTransactionParams {
	this := LedgerTransactionParams{}
	this.Amount = amount
	this.Currency = currency
	this.TransactionId = transactionId
	this.TransactionProcess = transactionProcess
	this.TransactionType = transactionType
	return &this
}

// NewLedgerTransactionParamsWithDefaults instantiates a new LedgerTransactionParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLedgerTransactionParamsWithDefaults() *LedgerTransactionParams {
	this := LedgerTransactionParams{}
	return &this
}

// GetAmount returns the Amount field value
func (o *LedgerTransactionParams) GetAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *LedgerTransactionParams) GetAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *LedgerTransactionParams) SetAmount(v string) {
	o.Amount = v
}

// GetCurrency returns the Currency field value
func (o *LedgerTransactionParams) GetCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *LedgerTransactionParams) GetCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *LedgerTransactionParams) SetCurrency(v string) {
	o.Currency = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *LedgerTransactionParams) GetMetadata() map[string]interface{} {
	if o == nil || IsNil(o.Metadata) {
		var ret map[string]interface{}
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LedgerTransactionParams) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Metadata) {
		return map[string]interface{}{}, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *LedgerTransactionParams) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]interface{} and assigns it to the Metadata field.
func (o *LedgerTransactionParams) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

// GetParamAccount1 returns the ParamAccount1 field value if set, zero value otherwise.
func (o *LedgerTransactionParams) GetParamAccount1() string {
	if o == nil || IsNil(o.ParamAccount1) {
		var ret string
		return ret
	}
	return *o.ParamAccount1
}

// GetParamAccount1Ok returns a tuple with the ParamAccount1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LedgerTransactionParams) GetParamAccount1Ok() (*string, bool) {
	if o == nil || IsNil(o.ParamAccount1) {
		return nil, false
	}
	return o.ParamAccount1, true
}

// HasParamAccount1 returns a boolean if a field has been set.
func (o *LedgerTransactionParams) HasParamAccount1() bool {
	if o != nil && !IsNil(o.ParamAccount1) {
		return true
	}

	return false
}

// SetParamAccount1 gets a reference to the given string and assigns it to the ParamAccount1 field.
func (o *LedgerTransactionParams) SetParamAccount1(v string) {
	o.ParamAccount1 = &v
}

// GetParamAccount2 returns the ParamAccount2 field value if set, zero value otherwise.
func (o *LedgerTransactionParams) GetParamAccount2() string {
	if o == nil || IsNil(o.ParamAccount2) {
		var ret string
		return ret
	}
	return *o.ParamAccount2
}

// GetParamAccount2Ok returns a tuple with the ParamAccount2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LedgerTransactionParams) GetParamAccount2Ok() (*string, bool) {
	if o == nil || IsNil(o.ParamAccount2) {
		return nil, false
	}
	return o.ParamAccount2, true
}

// HasParamAccount2 returns a boolean if a field has been set.
func (o *LedgerTransactionParams) HasParamAccount2() bool {
	if o != nil && !IsNil(o.ParamAccount2) {
		return true
	}

	return false
}

// SetParamAccount2 gets a reference to the given string and assigns it to the ParamAccount2 field.
func (o *LedgerTransactionParams) SetParamAccount2(v string) {
	o.ParamAccount2 = &v
}

// GetTransactionId returns the TransactionId field value
func (o *LedgerTransactionParams) GetTransactionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TransactionId
}

// GetTransactionIdOk returns a tuple with the TransactionId field value
// and a boolean to check if the value has been set.
func (o *LedgerTransactionParams) GetTransactionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransactionId, true
}

// SetTransactionId sets field value
func (o *LedgerTransactionParams) SetTransactionId(v string) {
	o.TransactionId = v
}

// GetTransactionProcess returns the TransactionProcess field value
func (o *LedgerTransactionParams) GetTransactionProcess() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TransactionProcess
}

// GetTransactionProcessOk returns a tuple with the TransactionProcess field value
// and a boolean to check if the value has been set.
func (o *LedgerTransactionParams) GetTransactionProcessOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransactionProcess, true
}

// SetTransactionProcess sets field value
func (o *LedgerTransactionParams) SetTransactionProcess(v string) {
	o.TransactionProcess = v
}

// GetTransactionType returns the TransactionType field value
func (o *LedgerTransactionParams) GetTransactionType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TransactionType
}

// GetTransactionTypeOk returns a tuple with the TransactionType field value
// and a boolean to check if the value has been set.
func (o *LedgerTransactionParams) GetTransactionTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransactionType, true
}

// SetTransactionType sets field value
func (o *LedgerTransactionParams) SetTransactionType(v string) {
	o.TransactionType = v
}

func (o LedgerTransactionParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LedgerTransactionParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["amount"] = o.Amount
	toSerialize["currency"] = o.Currency
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.ParamAccount1) {
		toSerialize["paramAccount1"] = o.ParamAccount1
	}
	if !IsNil(o.ParamAccount2) {
		toSerialize["paramAccount2"] = o.ParamAccount2
	}
	toSerialize["transactionId"] = o.TransactionId
	toSerialize["transactionProcess"] = o.TransactionProcess
	toSerialize["transactionType"] = o.TransactionType
	return toSerialize, nil
}

type NullableLedgerTransactionParams struct {
	value *LedgerTransactionParams
	isSet bool
}

func (v NullableLedgerTransactionParams) Get() *LedgerTransactionParams {
	return v.value
}

func (v *NullableLedgerTransactionParams) Set(val *LedgerTransactionParams) {
	v.value = val
	v.isSet = true
}

func (v NullableLedgerTransactionParams) IsSet() bool {
	return v.isSet
}

func (v *NullableLedgerTransactionParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLedgerTransactionParams(val *LedgerTransactionParams) *NullableLedgerTransactionParams {
	return &NullableLedgerTransactionParams{value: val, isSet: true}
}

func (v NullableLedgerTransactionParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLedgerTransactionParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


