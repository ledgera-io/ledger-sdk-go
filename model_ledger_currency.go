/*
Ledgera

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the LedgerCurrency type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LedgerCurrency{}

// LedgerCurrency struct for LedgerCurrency
type LedgerCurrency struct {
	Code *string `json:"code,omitempty"`
	CreatedAt *string `json:"createdAt,omitempty"`
	Name *string `json:"name,omitempty"`
}

// NewLedgerCurrency instantiates a new LedgerCurrency object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLedgerCurrency() *LedgerCurrency {
	this := LedgerCurrency{}
	return &this
}

// NewLedgerCurrencyWithDefaults instantiates a new LedgerCurrency object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLedgerCurrencyWithDefaults() *LedgerCurrency {
	this := LedgerCurrency{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *LedgerCurrency) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LedgerCurrency) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *LedgerCurrency) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *LedgerCurrency) SetCode(v string) {
	o.Code = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *LedgerCurrency) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LedgerCurrency) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *LedgerCurrency) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *LedgerCurrency) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *LedgerCurrency) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LedgerCurrency) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *LedgerCurrency) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *LedgerCurrency) SetName(v string) {
	o.Name = &v
}

func (o LedgerCurrency) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LedgerCurrency) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

type NullableLedgerCurrency struct {
	value *LedgerCurrency
	isSet bool
}

func (v NullableLedgerCurrency) Get() *LedgerCurrency {
	return v.value
}

func (v *NullableLedgerCurrency) Set(val *LedgerCurrency) {
	v.value = val
	v.isSet = true
}

func (v NullableLedgerCurrency) IsSet() bool {
	return v.isSet
}

func (v *NullableLedgerCurrency) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLedgerCurrency(val *LedgerCurrency) *NullableLedgerCurrency {
	return &NullableLedgerCurrency{value: val, isSet: true}
}

func (v NullableLedgerCurrency) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLedgerCurrency) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


