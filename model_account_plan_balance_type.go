/*
Ledgera core API

Ledgera servers.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// AccountPlanBalanceType the model 'AccountPlanBalanceType'
type AccountPlanBalanceType string

// List of account_plan.BalanceType
const (
	BalanceTypeAvailable AccountPlanBalanceType = "available"
	BalanceTypeBlocked AccountPlanBalanceType = "blocked"
	BalanceTypePending AccountPlanBalanceType = "pending"
)

// All allowed values of AccountPlanBalanceType enum
var AllowedAccountPlanBalanceTypeEnumValues = []AccountPlanBalanceType{
	"available",
	"blocked",
	"pending",
}

func (v *AccountPlanBalanceType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AccountPlanBalanceType(value)
	for _, existing := range AllowedAccountPlanBalanceTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AccountPlanBalanceType", value)
}

// NewAccountPlanBalanceTypeFromValue returns a pointer to a valid AccountPlanBalanceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAccountPlanBalanceTypeFromValue(v string) (*AccountPlanBalanceType, error) {
	ev := AccountPlanBalanceType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AccountPlanBalanceType: valid values are %v", v, AllowedAccountPlanBalanceTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AccountPlanBalanceType) IsValid() bool {
	for _, existing := range AllowedAccountPlanBalanceTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to account_plan.BalanceType value
func (v AccountPlanBalanceType) Ptr() *AccountPlanBalanceType {
	return &v
}

type NullableAccountPlanBalanceType struct {
	value *AccountPlanBalanceType
	isSet bool
}

func (v NullableAccountPlanBalanceType) Get() *AccountPlanBalanceType {
	return v.value
}

func (v *NullableAccountPlanBalanceType) Set(val *AccountPlanBalanceType) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountPlanBalanceType) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountPlanBalanceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountPlanBalanceType(val *AccountPlanBalanceType) *NullableAccountPlanBalanceType {
	return &NullableAccountPlanBalanceType{value: val, isSet: true}
}

func (v NullableAccountPlanBalanceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountPlanBalanceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

