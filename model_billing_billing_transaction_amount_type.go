/*
ledgera

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// BillingBillingTransactionAmountType the model 'BillingBillingTransactionAmountType'
type BillingBillingTransactionAmountType string

// List of billing.BillingTransactionAmountType
const (
	AmountTypeValue BillingBillingTransactionAmountType = "VALUE"
	AmountTypePercentage BillingBillingTransactionAmountType = "PERCENTAGE"
)

// All allowed values of BillingBillingTransactionAmountType enum
var AllowedBillingBillingTransactionAmountTypeEnumValues = []BillingBillingTransactionAmountType{
	"VALUE",
	"PERCENTAGE",
}

func (v *BillingBillingTransactionAmountType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BillingBillingTransactionAmountType(value)
	for _, existing := range AllowedBillingBillingTransactionAmountTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BillingBillingTransactionAmountType", value)
}

// NewBillingBillingTransactionAmountTypeFromValue returns a pointer to a valid BillingBillingTransactionAmountType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBillingBillingTransactionAmountTypeFromValue(v string) (*BillingBillingTransactionAmountType, error) {
	ev := BillingBillingTransactionAmountType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BillingBillingTransactionAmountType: valid values are %v", v, AllowedBillingBillingTransactionAmountTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BillingBillingTransactionAmountType) IsValid() bool {
	for _, existing := range AllowedBillingBillingTransactionAmountTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to billing.BillingTransactionAmountType value
func (v BillingBillingTransactionAmountType) Ptr() *BillingBillingTransactionAmountType {
	return &v
}

type NullableBillingBillingTransactionAmountType struct {
	value *BillingBillingTransactionAmountType
	isSet bool
}

func (v NullableBillingBillingTransactionAmountType) Get() *BillingBillingTransactionAmountType {
	return v.value
}

func (v *NullableBillingBillingTransactionAmountType) Set(val *BillingBillingTransactionAmountType) {
	v.value = val
	v.isSet = true
}

func (v NullableBillingBillingTransactionAmountType) IsSet() bool {
	return v.isSet
}

func (v *NullableBillingBillingTransactionAmountType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBillingBillingTransactionAmountType(val *BillingBillingTransactionAmountType) *NullableBillingBillingTransactionAmountType {
	return &NullableBillingBillingTransactionAmountType{value: val, isSet: true}
}

func (v NullableBillingBillingTransactionAmountType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBillingBillingTransactionAmountType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

