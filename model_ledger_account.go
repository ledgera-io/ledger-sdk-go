/*
ledgera

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the LedgerAccount type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LedgerAccount{}

// LedgerAccount struct for LedgerAccount
type LedgerAccount struct {
	Balances []LedgerBalance `json:"balances,omitempty"`
	BillingPlanId *string `json:"billingPlanId,omitempty"`
	CreatedAt *string `json:"createdAt,omitempty"`
	Id *string `json:"id,omitempty"`
	SubType *string `json:"subType,omitempty"`
	Type *string `json:"type,omitempty"`
}

// NewLedgerAccount instantiates a new LedgerAccount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLedgerAccount() *LedgerAccount {
	this := LedgerAccount{}
	return &this
}

// NewLedgerAccountWithDefaults instantiates a new LedgerAccount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLedgerAccountWithDefaults() *LedgerAccount {
	this := LedgerAccount{}
	return &this
}

// GetBalances returns the Balances field value if set, zero value otherwise.
func (o *LedgerAccount) GetBalances() []LedgerBalance {
	if o == nil || IsNil(o.Balances) {
		var ret []LedgerBalance
		return ret
	}
	return o.Balances
}

// GetBalancesOk returns a tuple with the Balances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LedgerAccount) GetBalancesOk() ([]LedgerBalance, bool) {
	if o == nil || IsNil(o.Balances) {
		return nil, false
	}
	return o.Balances, true
}

// HasBalances returns a boolean if a field has been set.
func (o *LedgerAccount) HasBalances() bool {
	if o != nil && !IsNil(o.Balances) {
		return true
	}

	return false
}

// SetBalances gets a reference to the given []LedgerBalance and assigns it to the Balances field.
func (o *LedgerAccount) SetBalances(v []LedgerBalance) {
	o.Balances = v
}

// GetBillingPlanId returns the BillingPlanId field value if set, zero value otherwise.
func (o *LedgerAccount) GetBillingPlanId() string {
	if o == nil || IsNil(o.BillingPlanId) {
		var ret string
		return ret
	}
	return *o.BillingPlanId
}

// GetBillingPlanIdOk returns a tuple with the BillingPlanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LedgerAccount) GetBillingPlanIdOk() (*string, bool) {
	if o == nil || IsNil(o.BillingPlanId) {
		return nil, false
	}
	return o.BillingPlanId, true
}

// HasBillingPlanId returns a boolean if a field has been set.
func (o *LedgerAccount) HasBillingPlanId() bool {
	if o != nil && !IsNil(o.BillingPlanId) {
		return true
	}

	return false
}

// SetBillingPlanId gets a reference to the given string and assigns it to the BillingPlanId field.
func (o *LedgerAccount) SetBillingPlanId(v string) {
	o.BillingPlanId = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *LedgerAccount) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LedgerAccount) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *LedgerAccount) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *LedgerAccount) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *LedgerAccount) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LedgerAccount) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *LedgerAccount) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *LedgerAccount) SetId(v string) {
	o.Id = &v
}

// GetSubType returns the SubType field value if set, zero value otherwise.
func (o *LedgerAccount) GetSubType() string {
	if o == nil || IsNil(o.SubType) {
		var ret string
		return ret
	}
	return *o.SubType
}

// GetSubTypeOk returns a tuple with the SubType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LedgerAccount) GetSubTypeOk() (*string, bool) {
	if o == nil || IsNil(o.SubType) {
		return nil, false
	}
	return o.SubType, true
}

// HasSubType returns a boolean if a field has been set.
func (o *LedgerAccount) HasSubType() bool {
	if o != nil && !IsNil(o.SubType) {
		return true
	}

	return false
}

// SetSubType gets a reference to the given string and assigns it to the SubType field.
func (o *LedgerAccount) SetSubType(v string) {
	o.SubType = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *LedgerAccount) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LedgerAccount) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *LedgerAccount) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *LedgerAccount) SetType(v string) {
	o.Type = &v
}

func (o LedgerAccount) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LedgerAccount) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Balances) {
		toSerialize["balances"] = o.Balances
	}
	if !IsNil(o.BillingPlanId) {
		toSerialize["billingPlanId"] = o.BillingPlanId
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.SubType) {
		toSerialize["subType"] = o.SubType
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableLedgerAccount struct {
	value *LedgerAccount
	isSet bool
}

func (v NullableLedgerAccount) Get() *LedgerAccount {
	return v.value
}

func (v *NullableLedgerAccount) Set(val *LedgerAccount) {
	v.value = val
	v.isSet = true
}

func (v NullableLedgerAccount) IsSet() bool {
	return v.isSet
}

func (v *NullableLedgerAccount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLedgerAccount(val *LedgerAccount) *NullableLedgerAccount {
	return &NullableLedgerAccount{value: val, isSet: true}
}

func (v NullableLedgerAccount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLedgerAccount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


