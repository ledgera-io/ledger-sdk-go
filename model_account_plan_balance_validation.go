/*
ledgera

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// AccountPlanBalanceValidation the model 'AccountPlanBalanceValidation'
type AccountPlanBalanceValidation string

// List of account_plan.BalanceValidation
const (
	BalanceValidationPositive AccountPlanBalanceValidation = "positive"
	BalanceValidationNegative AccountPlanBalanceValidation = "negative"
	BalanceValidationNoValidation AccountPlanBalanceValidation = "notValidated"
)

// All allowed values of AccountPlanBalanceValidation enum
var AllowedAccountPlanBalanceValidationEnumValues = []AccountPlanBalanceValidation{
	"positive",
	"negative",
	"notValidated",
}

func (v *AccountPlanBalanceValidation) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AccountPlanBalanceValidation(value)
	for _, existing := range AllowedAccountPlanBalanceValidationEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AccountPlanBalanceValidation", value)
}

// NewAccountPlanBalanceValidationFromValue returns a pointer to a valid AccountPlanBalanceValidation
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAccountPlanBalanceValidationFromValue(v string) (*AccountPlanBalanceValidation, error) {
	ev := AccountPlanBalanceValidation(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AccountPlanBalanceValidation: valid values are %v", v, AllowedAccountPlanBalanceValidationEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AccountPlanBalanceValidation) IsValid() bool {
	for _, existing := range AllowedAccountPlanBalanceValidationEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to account_plan.BalanceValidation value
func (v AccountPlanBalanceValidation) Ptr() *AccountPlanBalanceValidation {
	return &v
}

type NullableAccountPlanBalanceValidation struct {
	value *AccountPlanBalanceValidation
	isSet bool
}

func (v NullableAccountPlanBalanceValidation) Get() *AccountPlanBalanceValidation {
	return v.value
}

func (v *NullableAccountPlanBalanceValidation) Set(val *AccountPlanBalanceValidation) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountPlanBalanceValidation) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountPlanBalanceValidation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountPlanBalanceValidation(val *AccountPlanBalanceValidation) *NullableAccountPlanBalanceValidation {
	return &NullableAccountPlanBalanceValidation{value: val, isSet: true}
}

func (v NullableAccountPlanBalanceValidation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountPlanBalanceValidation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

