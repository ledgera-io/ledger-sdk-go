/*
Ledgera core API

Ledgera servers.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the LedgerAccountWithBillingPlan type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LedgerAccountWithBillingPlan{}

// LedgerAccountWithBillingPlan struct for LedgerAccountWithBillingPlan
type LedgerAccountWithBillingPlan struct {
	Balances []LedgerBalance `json:"balances,omitempty"`
	BillingPlanId *string `json:"billingPlanId,omitempty"`
	BillingPlans []BillingBillingPlan `json:"billingPlans,omitempty"`
	CreatedAt *string `json:"createdAt,omitempty"`
	Id *string `json:"id,omitempty"`
	SubType *string `json:"subType,omitempty"`
	Type *string `json:"type,omitempty"`
}

// NewLedgerAccountWithBillingPlan instantiates a new LedgerAccountWithBillingPlan object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLedgerAccountWithBillingPlan() *LedgerAccountWithBillingPlan {
	this := LedgerAccountWithBillingPlan{}
	return &this
}

// NewLedgerAccountWithBillingPlanWithDefaults instantiates a new LedgerAccountWithBillingPlan object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLedgerAccountWithBillingPlanWithDefaults() *LedgerAccountWithBillingPlan {
	this := LedgerAccountWithBillingPlan{}
	return &this
}

// GetBalances returns the Balances field value if set, zero value otherwise.
func (o *LedgerAccountWithBillingPlan) GetBalances() []LedgerBalance {
	if o == nil || IsNil(o.Balances) {
		var ret []LedgerBalance
		return ret
	}
	return o.Balances
}

// GetBalancesOk returns a tuple with the Balances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LedgerAccountWithBillingPlan) GetBalancesOk() ([]LedgerBalance, bool) {
	if o == nil || IsNil(o.Balances) {
		return nil, false
	}
	return o.Balances, true
}

// HasBalances returns a boolean if a field has been set.
func (o *LedgerAccountWithBillingPlan) HasBalances() bool {
	if o != nil && !IsNil(o.Balances) {
		return true
	}

	return false
}

// SetBalances gets a reference to the given []LedgerBalance and assigns it to the Balances field.
func (o *LedgerAccountWithBillingPlan) SetBalances(v []LedgerBalance) {
	o.Balances = v
}

// GetBillingPlanId returns the BillingPlanId field value if set, zero value otherwise.
func (o *LedgerAccountWithBillingPlan) GetBillingPlanId() string {
	if o == nil || IsNil(o.BillingPlanId) {
		var ret string
		return ret
	}
	return *o.BillingPlanId
}

// GetBillingPlanIdOk returns a tuple with the BillingPlanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LedgerAccountWithBillingPlan) GetBillingPlanIdOk() (*string, bool) {
	if o == nil || IsNil(o.BillingPlanId) {
		return nil, false
	}
	return o.BillingPlanId, true
}

// HasBillingPlanId returns a boolean if a field has been set.
func (o *LedgerAccountWithBillingPlan) HasBillingPlanId() bool {
	if o != nil && !IsNil(o.BillingPlanId) {
		return true
	}

	return false
}

// SetBillingPlanId gets a reference to the given string and assigns it to the BillingPlanId field.
func (o *LedgerAccountWithBillingPlan) SetBillingPlanId(v string) {
	o.BillingPlanId = &v
}

// GetBillingPlans returns the BillingPlans field value if set, zero value otherwise.
func (o *LedgerAccountWithBillingPlan) GetBillingPlans() []BillingBillingPlan {
	if o == nil || IsNil(o.BillingPlans) {
		var ret []BillingBillingPlan
		return ret
	}
	return o.BillingPlans
}

// GetBillingPlansOk returns a tuple with the BillingPlans field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LedgerAccountWithBillingPlan) GetBillingPlansOk() ([]BillingBillingPlan, bool) {
	if o == nil || IsNil(o.BillingPlans) {
		return nil, false
	}
	return o.BillingPlans, true
}

// HasBillingPlans returns a boolean if a field has been set.
func (o *LedgerAccountWithBillingPlan) HasBillingPlans() bool {
	if o != nil && !IsNil(o.BillingPlans) {
		return true
	}

	return false
}

// SetBillingPlans gets a reference to the given []BillingBillingPlan and assigns it to the BillingPlans field.
func (o *LedgerAccountWithBillingPlan) SetBillingPlans(v []BillingBillingPlan) {
	o.BillingPlans = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *LedgerAccountWithBillingPlan) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LedgerAccountWithBillingPlan) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *LedgerAccountWithBillingPlan) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *LedgerAccountWithBillingPlan) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *LedgerAccountWithBillingPlan) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LedgerAccountWithBillingPlan) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *LedgerAccountWithBillingPlan) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *LedgerAccountWithBillingPlan) SetId(v string) {
	o.Id = &v
}

// GetSubType returns the SubType field value if set, zero value otherwise.
func (o *LedgerAccountWithBillingPlan) GetSubType() string {
	if o == nil || IsNil(o.SubType) {
		var ret string
		return ret
	}
	return *o.SubType
}

// GetSubTypeOk returns a tuple with the SubType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LedgerAccountWithBillingPlan) GetSubTypeOk() (*string, bool) {
	if o == nil || IsNil(o.SubType) {
		return nil, false
	}
	return o.SubType, true
}

// HasSubType returns a boolean if a field has been set.
func (o *LedgerAccountWithBillingPlan) HasSubType() bool {
	if o != nil && !IsNil(o.SubType) {
		return true
	}

	return false
}

// SetSubType gets a reference to the given string and assigns it to the SubType field.
func (o *LedgerAccountWithBillingPlan) SetSubType(v string) {
	o.SubType = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *LedgerAccountWithBillingPlan) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LedgerAccountWithBillingPlan) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *LedgerAccountWithBillingPlan) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *LedgerAccountWithBillingPlan) SetType(v string) {
	o.Type = &v
}

func (o LedgerAccountWithBillingPlan) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LedgerAccountWithBillingPlan) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Balances) {
		toSerialize["balances"] = o.Balances
	}
	if !IsNil(o.BillingPlanId) {
		toSerialize["billingPlanId"] = o.BillingPlanId
	}
	if !IsNil(o.BillingPlans) {
		toSerialize["billingPlans"] = o.BillingPlans
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.SubType) {
		toSerialize["subType"] = o.SubType
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableLedgerAccountWithBillingPlan struct {
	value *LedgerAccountWithBillingPlan
	isSet bool
}

func (v NullableLedgerAccountWithBillingPlan) Get() *LedgerAccountWithBillingPlan {
	return v.value
}

func (v *NullableLedgerAccountWithBillingPlan) Set(val *LedgerAccountWithBillingPlan) {
	v.value = val
	v.isSet = true
}

func (v NullableLedgerAccountWithBillingPlan) IsSet() bool {
	return v.isSet
}

func (v *NullableLedgerAccountWithBillingPlan) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLedgerAccountWithBillingPlan(val *LedgerAccountWithBillingPlan) *NullableLedgerAccountWithBillingPlan {
	return &NullableLedgerAccountWithBillingPlan{value: val, isSet: true}
}

func (v NullableLedgerAccountWithBillingPlan) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLedgerAccountWithBillingPlan) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


