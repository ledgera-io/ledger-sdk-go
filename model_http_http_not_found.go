/*
Ledgera

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the HttpHttpNotFound type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HttpHttpNotFound{}

// HttpHttpNotFound struct for HttpHttpNotFound
type HttpHttpNotFound struct {
	Message *string `json:"message,omitempty"`
	Resource *string `json:"resource,omitempty"`
}

// NewHttpHttpNotFound instantiates a new HttpHttpNotFound object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHttpHttpNotFound() *HttpHttpNotFound {
	this := HttpHttpNotFound{}
	return &this
}

// NewHttpHttpNotFoundWithDefaults instantiates a new HttpHttpNotFound object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHttpHttpNotFoundWithDefaults() *HttpHttpNotFound {
	this := HttpHttpNotFound{}
	return &this
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *HttpHttpNotFound) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpHttpNotFound) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *HttpHttpNotFound) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *HttpHttpNotFound) SetMessage(v string) {
	o.Message = &v
}

// GetResource returns the Resource field value if set, zero value otherwise.
func (o *HttpHttpNotFound) GetResource() string {
	if o == nil || IsNil(o.Resource) {
		var ret string
		return ret
	}
	return *o.Resource
}

// GetResourceOk returns a tuple with the Resource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpHttpNotFound) GetResourceOk() (*string, bool) {
	if o == nil || IsNil(o.Resource) {
		return nil, false
	}
	return o.Resource, true
}

// HasResource returns a boolean if a field has been set.
func (o *HttpHttpNotFound) HasResource() bool {
	if o != nil && !IsNil(o.Resource) {
		return true
	}

	return false
}

// SetResource gets a reference to the given string and assigns it to the Resource field.
func (o *HttpHttpNotFound) SetResource(v string) {
	o.Resource = &v
}

func (o HttpHttpNotFound) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HttpHttpNotFound) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.Resource) {
		toSerialize["resource"] = o.Resource
	}
	return toSerialize, nil
}

type NullableHttpHttpNotFound struct {
	value *HttpHttpNotFound
	isSet bool
}

func (v NullableHttpHttpNotFound) Get() *HttpHttpNotFound {
	return v.value
}

func (v *NullableHttpHttpNotFound) Set(val *HttpHttpNotFound) {
	v.value = val
	v.isSet = true
}

func (v NullableHttpHttpNotFound) IsSet() bool {
	return v.isSet
}

func (v *NullableHttpHttpNotFound) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHttpHttpNotFound(val *HttpHttpNotFound) *NullableHttpHttpNotFound {
	return &NullableHttpHttpNotFound{value: val, isSet: true}
}

func (v NullableHttpHttpNotFound) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHttpHttpNotFound) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


