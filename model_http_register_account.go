/*
Ledgera

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the HttpRegisterAccount type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HttpRegisterAccount{}

// HttpRegisterAccount struct for HttpRegisterAccount
type HttpRegisterAccount struct {
	Currencies []string `json:"currencies"`
	SubType string `json:"subType"`
	Type string `json:"type"`
}

// NewHttpRegisterAccount instantiates a new HttpRegisterAccount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHttpRegisterAccount(currencies []string, subType string, type_ string) *HttpRegisterAccount {
	this := HttpRegisterAccount{}
	this.Currencies = currencies
	this.SubType = subType
	this.Type = type_
	return &this
}

// NewHttpRegisterAccountWithDefaults instantiates a new HttpRegisterAccount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHttpRegisterAccountWithDefaults() *HttpRegisterAccount {
	this := HttpRegisterAccount{}
	return &this
}

// GetCurrencies returns the Currencies field value
func (o *HttpRegisterAccount) GetCurrencies() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Currencies
}

// GetCurrenciesOk returns a tuple with the Currencies field value
// and a boolean to check if the value has been set.
func (o *HttpRegisterAccount) GetCurrenciesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Currencies, true
}

// SetCurrencies sets field value
func (o *HttpRegisterAccount) SetCurrencies(v []string) {
	o.Currencies = v
}

// GetSubType returns the SubType field value
func (o *HttpRegisterAccount) GetSubType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SubType
}

// GetSubTypeOk returns a tuple with the SubType field value
// and a boolean to check if the value has been set.
func (o *HttpRegisterAccount) GetSubTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubType, true
}

// SetSubType sets field value
func (o *HttpRegisterAccount) SetSubType(v string) {
	o.SubType = v
}

// GetType returns the Type field value
func (o *HttpRegisterAccount) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *HttpRegisterAccount) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *HttpRegisterAccount) SetType(v string) {
	o.Type = v
}

func (o HttpRegisterAccount) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HttpRegisterAccount) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["currencies"] = o.Currencies
	toSerialize["subType"] = o.SubType
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

type NullableHttpRegisterAccount struct {
	value *HttpRegisterAccount
	isSet bool
}

func (v NullableHttpRegisterAccount) Get() *HttpRegisterAccount {
	return v.value
}

func (v *NullableHttpRegisterAccount) Set(val *HttpRegisterAccount) {
	v.value = val
	v.isSet = true
}

func (v NullableHttpRegisterAccount) IsSet() bool {
	return v.isSet
}

func (v *NullableHttpRegisterAccount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHttpRegisterAccount(val *HttpRegisterAccount) *NullableHttpRegisterAccount {
	return &NullableHttpRegisterAccount{value: val, isSet: true}
}

func (v NullableHttpRegisterAccount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHttpRegisterAccount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


