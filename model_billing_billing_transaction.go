/*
Ledgera

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the BillingBillingTransaction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BillingBillingTransaction{}

// BillingBillingTransaction struct for BillingBillingTransaction
type BillingBillingTransaction struct {
	Amount *float32 `json:"amount,omitempty"`
	EntryType *string `json:"entryType,omitempty"`
	TransactionType *string `json:"transactionType,omitempty"`
	Type *BillingBillingTransactionAmountType `json:"type,omitempty"`
}

// NewBillingBillingTransaction instantiates a new BillingBillingTransaction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBillingBillingTransaction() *BillingBillingTransaction {
	this := BillingBillingTransaction{}
	return &this
}

// NewBillingBillingTransactionWithDefaults instantiates a new BillingBillingTransaction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBillingBillingTransactionWithDefaults() *BillingBillingTransaction {
	this := BillingBillingTransaction{}
	return &this
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *BillingBillingTransaction) GetAmount() float32 {
	if o == nil || IsNil(o.Amount) {
		var ret float32
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingBillingTransaction) GetAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *BillingBillingTransaction) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given float32 and assigns it to the Amount field.
func (o *BillingBillingTransaction) SetAmount(v float32) {
	o.Amount = &v
}

// GetEntryType returns the EntryType field value if set, zero value otherwise.
func (o *BillingBillingTransaction) GetEntryType() string {
	if o == nil || IsNil(o.EntryType) {
		var ret string
		return ret
	}
	return *o.EntryType
}

// GetEntryTypeOk returns a tuple with the EntryType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingBillingTransaction) GetEntryTypeOk() (*string, bool) {
	if o == nil || IsNil(o.EntryType) {
		return nil, false
	}
	return o.EntryType, true
}

// HasEntryType returns a boolean if a field has been set.
func (o *BillingBillingTransaction) HasEntryType() bool {
	if o != nil && !IsNil(o.EntryType) {
		return true
	}

	return false
}

// SetEntryType gets a reference to the given string and assigns it to the EntryType field.
func (o *BillingBillingTransaction) SetEntryType(v string) {
	o.EntryType = &v
}

// GetTransactionType returns the TransactionType field value if set, zero value otherwise.
func (o *BillingBillingTransaction) GetTransactionType() string {
	if o == nil || IsNil(o.TransactionType) {
		var ret string
		return ret
	}
	return *o.TransactionType
}

// GetTransactionTypeOk returns a tuple with the TransactionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingBillingTransaction) GetTransactionTypeOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionType) {
		return nil, false
	}
	return o.TransactionType, true
}

// HasTransactionType returns a boolean if a field has been set.
func (o *BillingBillingTransaction) HasTransactionType() bool {
	if o != nil && !IsNil(o.TransactionType) {
		return true
	}

	return false
}

// SetTransactionType gets a reference to the given string and assigns it to the TransactionType field.
func (o *BillingBillingTransaction) SetTransactionType(v string) {
	o.TransactionType = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *BillingBillingTransaction) GetType() BillingBillingTransactionAmountType {
	if o == nil || IsNil(o.Type) {
		var ret BillingBillingTransactionAmountType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingBillingTransaction) GetTypeOk() (*BillingBillingTransactionAmountType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *BillingBillingTransaction) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given BillingBillingTransactionAmountType and assigns it to the Type field.
func (o *BillingBillingTransaction) SetType(v BillingBillingTransactionAmountType) {
	o.Type = &v
}

func (o BillingBillingTransaction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BillingBillingTransaction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !IsNil(o.EntryType) {
		toSerialize["entryType"] = o.EntryType
	}
	if !IsNil(o.TransactionType) {
		toSerialize["transactionType"] = o.TransactionType
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableBillingBillingTransaction struct {
	value *BillingBillingTransaction
	isSet bool
}

func (v NullableBillingBillingTransaction) Get() *BillingBillingTransaction {
	return v.value
}

func (v *NullableBillingBillingTransaction) Set(val *BillingBillingTransaction) {
	v.value = val
	v.isSet = true
}

func (v NullableBillingBillingTransaction) IsSet() bool {
	return v.isSet
}

func (v *NullableBillingBillingTransaction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBillingBillingTransaction(val *BillingBillingTransaction) *NullableBillingBillingTransaction {
	return &NullableBillingBillingTransaction{value: val, isSet: true}
}

func (v NullableBillingBillingTransaction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBillingBillingTransaction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


