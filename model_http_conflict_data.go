/*
Ledgera API

teste

API version: 2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the HttpConflictData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HttpConflictData{}

// HttpConflictData struct for HttpConflictData
type HttpConflictData struct {
	AccountId *string `json:"accountId,omitempty"`
	Code *string `json:"code,omitempty"`
	ExpectedAmount *string `json:"expectedAmount,omitempty"`
	TransactionId *string `json:"transactionId,omitempty"`
	TransactionProcess *string `json:"transactionProcess,omitempty"`
	TransactionType *string `json:"transactionType,omitempty"`
}

// NewHttpConflictData instantiates a new HttpConflictData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHttpConflictData() *HttpConflictData {
	this := HttpConflictData{}
	return &this
}

// NewHttpConflictDataWithDefaults instantiates a new HttpConflictData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHttpConflictDataWithDefaults() *HttpConflictData {
	this := HttpConflictData{}
	return &this
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *HttpConflictData) GetAccountId() string {
	if o == nil || IsNil(o.AccountId) {
		var ret string
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpConflictData) GetAccountIdOk() (*string, bool) {
	if o == nil || IsNil(o.AccountId) {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *HttpConflictData) HasAccountId() bool {
	if o != nil && !IsNil(o.AccountId) {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given string and assigns it to the AccountId field.
func (o *HttpConflictData) SetAccountId(v string) {
	o.AccountId = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *HttpConflictData) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpConflictData) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *HttpConflictData) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *HttpConflictData) SetCode(v string) {
	o.Code = &v
}

// GetExpectedAmount returns the ExpectedAmount field value if set, zero value otherwise.
func (o *HttpConflictData) GetExpectedAmount() string {
	if o == nil || IsNil(o.ExpectedAmount) {
		var ret string
		return ret
	}
	return *o.ExpectedAmount
}

// GetExpectedAmountOk returns a tuple with the ExpectedAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpConflictData) GetExpectedAmountOk() (*string, bool) {
	if o == nil || IsNil(o.ExpectedAmount) {
		return nil, false
	}
	return o.ExpectedAmount, true
}

// HasExpectedAmount returns a boolean if a field has been set.
func (o *HttpConflictData) HasExpectedAmount() bool {
	if o != nil && !IsNil(o.ExpectedAmount) {
		return true
	}

	return false
}

// SetExpectedAmount gets a reference to the given string and assigns it to the ExpectedAmount field.
func (o *HttpConflictData) SetExpectedAmount(v string) {
	o.ExpectedAmount = &v
}

// GetTransactionId returns the TransactionId field value if set, zero value otherwise.
func (o *HttpConflictData) GetTransactionId() string {
	if o == nil || IsNil(o.TransactionId) {
		var ret string
		return ret
	}
	return *o.TransactionId
}

// GetTransactionIdOk returns a tuple with the TransactionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpConflictData) GetTransactionIdOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionId) {
		return nil, false
	}
	return o.TransactionId, true
}

// HasTransactionId returns a boolean if a field has been set.
func (o *HttpConflictData) HasTransactionId() bool {
	if o != nil && !IsNil(o.TransactionId) {
		return true
	}

	return false
}

// SetTransactionId gets a reference to the given string and assigns it to the TransactionId field.
func (o *HttpConflictData) SetTransactionId(v string) {
	o.TransactionId = &v
}

// GetTransactionProcess returns the TransactionProcess field value if set, zero value otherwise.
func (o *HttpConflictData) GetTransactionProcess() string {
	if o == nil || IsNil(o.TransactionProcess) {
		var ret string
		return ret
	}
	return *o.TransactionProcess
}

// GetTransactionProcessOk returns a tuple with the TransactionProcess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpConflictData) GetTransactionProcessOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionProcess) {
		return nil, false
	}
	return o.TransactionProcess, true
}

// HasTransactionProcess returns a boolean if a field has been set.
func (o *HttpConflictData) HasTransactionProcess() bool {
	if o != nil && !IsNil(o.TransactionProcess) {
		return true
	}

	return false
}

// SetTransactionProcess gets a reference to the given string and assigns it to the TransactionProcess field.
func (o *HttpConflictData) SetTransactionProcess(v string) {
	o.TransactionProcess = &v
}

// GetTransactionType returns the TransactionType field value if set, zero value otherwise.
func (o *HttpConflictData) GetTransactionType() string {
	if o == nil || IsNil(o.TransactionType) {
		var ret string
		return ret
	}
	return *o.TransactionType
}

// GetTransactionTypeOk returns a tuple with the TransactionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpConflictData) GetTransactionTypeOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionType) {
		return nil, false
	}
	return o.TransactionType, true
}

// HasTransactionType returns a boolean if a field has been set.
func (o *HttpConflictData) HasTransactionType() bool {
	if o != nil && !IsNil(o.TransactionType) {
		return true
	}

	return false
}

// SetTransactionType gets a reference to the given string and assigns it to the TransactionType field.
func (o *HttpConflictData) SetTransactionType(v string) {
	o.TransactionType = &v
}

func (o HttpConflictData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HttpConflictData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccountId) {
		toSerialize["accountId"] = o.AccountId
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.ExpectedAmount) {
		toSerialize["expectedAmount"] = o.ExpectedAmount
	}
	if !IsNil(o.TransactionId) {
		toSerialize["transactionId"] = o.TransactionId
	}
	if !IsNil(o.TransactionProcess) {
		toSerialize["transactionProcess"] = o.TransactionProcess
	}
	if !IsNil(o.TransactionType) {
		toSerialize["transactionType"] = o.TransactionType
	}
	return toSerialize, nil
}

type NullableHttpConflictData struct {
	value *HttpConflictData
	isSet bool
}

func (v NullableHttpConflictData) Get() *HttpConflictData {
	return v.value
}

func (v *NullableHttpConflictData) Set(val *HttpConflictData) {
	v.value = val
	v.isSet = true
}

func (v NullableHttpConflictData) IsSet() bool {
	return v.isSet
}

func (v *NullableHttpConflictData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHttpConflictData(val *HttpConflictData) *NullableHttpConflictData {
	return &NullableHttpConflictData{value: val, isSet: true}
}

func (v NullableHttpConflictData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHttpConflictData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


